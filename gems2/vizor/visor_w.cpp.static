#include <stdio.h>
#include <errno.h>
#include <iostream>
using namespace std;
#ifdef __unix
#include <unistd.h>
#endif

#include <qdialog.h>
#include <qfiledlg.h> 
#include <qmsgbox.h> 
#include <qapplication.h>
#include <qaccel.h>
#ifndef QTv1
# include <qtextbrowser.h>
# include <qlayout.h>
# include <qpushbutton.h>
#endif

#include "service.h"
#include "visor_w.h" 
#include "visor.h"
#include "module_w.h"
#include "m_param.h"
#include "m_syseq.h"
#include "page_win_w.h" 
#include "legend.h"
#include "dlg/MainDialog.h"
#include "dlg/SelectDialog.h"
#include "dlg/KeyFilter.h"
#include "dlg/ProgressDialog.h"
#include "dlg/SystemDialog.h"


//----------------------------------------------------------------
// TVisor
//----------------------------------------------------------------

TVisorImp::TVisorImp(int c, char** v):
  QMainWindow(0,"GEMS v0.99a"),
  argc(c),
  argv(v),
  CellFont("Helvetica", 12)
{
  pVisorImp = this;
  pHelpWidget = 0;
  updateTime = 1; // second

  pVisor = new TVisor(argc, argv);
  pVisor->Setup();

  gstring logoFile = pVisor->sysGEMDir() + "img/gems1.png";
  pixLogo = new QPixmap( logoFile.c_str() );

  setCaption("GEMS (GEM-Selektor) v0.99b");
}


TVisorImp::~TVisorImp()
{
  delete pVisor;
}

void
TVisorImp::closeEvent ( QCloseEvent * ev )
{
  if( pVisor->CanClose() )
  {
    for(uint ii=0; ii<aMod.GetCount(); ii++ )
      if( aMod[ii]->pImp )
        aMod[ii]->pImp->close();
  
    QWidget::closeEvent(ev);
  }    
}

void
TVisorImp::CmExit()
{
    close();
}

void
TVisorImp::Update(bool force)
{
  if( ProgressDialog::pDia )
    ProgressDialog::pDia->Update(force);

  if( SystemDialog::pDia )
    SystemDialog::pDia->Update();

  for( uint ii=0; ii<aMod.GetCount(); ii++ )
    aMod[ii]->Update(force);
}

void
TVisorImp::CalcFinished()
{
  if( ProgressDialog::pDia )
    ProgressDialog::pDia->CalcFinished();
}

bool
TVisorImp::SetProfileMode()
{
 try{
  pVisor->ProfileMode = true;
  if( !TProfil::pm->initCalcMode() )
  {
    pVisor->ProfileMode = false;
    return false;
  }
 }
 catch(...)
 {
    pVisor->ProfileMode = false;
    throw;  // go on
 } 
 
  return true;
}

//
// System control functions
//
bool 
TVisorImp::SetGeneralMode() 
{ 
  int nnrt = rt[RT_PHASE]->Find(defaultAqKey);
  if( nnrt >= 0 )
    rt[RT_PHASE]->Del(nnrt); 
  nnrt = rt[RT_PHASE]->Find(defaultGasKey);
  if( nnrt >= 0 )
    rt[RT_PHASE]->Del(nnrt); 
  TProfil::pm->dyn_kill(); 
  TProfil::pm->set_def(); 

  pVisor->ProfileMode = false;
  
  return true;
} 

void
TVisorImp::ShowPhaseWindow()
{
 try 
 { 
   TProfil::pm->ShowPhaseWindow(); 
 } 
 catch( TError& xcpt ) 
 {
   vfMessage(this, xcpt.title, xcpt.mess); 
 } 
}

void 
TVisorImp::NewSystem() 
{ 
 try 
 { 
   TProfil::pm->newSystat(); 
 } 
 catch( TError& xcpt ) 
 {
   vfMessage(this, xcpt.title, xcpt.mess); 
 } 
} 

void 
TVisorImp::RemakeSystem() 
{ 
 try 
 { 
   TProfil::pm->deriveSystat(); 
 } 
 catch( TError& xcpt ) 
 {
   vfMessage(this, xcpt.title, xcpt.mess); 
 } 
} 

void 
TVisorImp::LoadSystem() 
{ 
 try 
 { 
   TProfil::pm->loadSystat(); 
 } 
 catch( TError& xcpt ) 
 {
   vfMessage(this, xcpt.title, xcpt.mess); 
 } 
} 
 
void 
TVisorImp::CalcMulti() 
{ 
 TProfil::pm->fStopCalc = false;
 try 
 { 
    TProfil::pm->CalcEqstat(); 
 } 
 catch( TError& xcpt ) 
 {
   vfMessage(this, xcpt.title, xcpt.mess); 
 } 
} 
 
void 
TVisorImp::SaveSystem() 
{ 
  TSysEq::pm->CmSave(); 
} 
 

//
// Visual functions
//
void
TVisorImp::SetDialog(QWidget* centralDialog)
{
    QWidget* oldCentral = centralWidget();

// if there's central widget already open
    if( oldCentral )
    // and it could be closed OK
	if( oldCentral->close() )
	    delete oldCentral;

    QWidget* d = QApplication::desktop();
    QSize sz = (d->size() - centralDialog->size()) / 2;
    if( sz.width()%2 )
	sz.setWidth( sz.width()+1 );
    move( sz.width(), sz.height() );
    setFixedSize( centralDialog->minimumSize() );
    setCentralWidget(centralDialog);
    centralDialog->show();
}

void
TVisorImp::PrintText( const char* title, char* text)
{
}

const char*
TVisorImp::version()
{
  return "v0.99b";
}

const char*
TVisorImp::getGEMTitle()
{
  return "GEMS (GEM-Selektor) v0.99b";
}

void
TVisorImp::CmHelpAbout()
{
    QMessageBox::about( this, "GEMS about",
			"GEM-Selektor (Geochemical Equilibrium Modelling) v 0.99b Linux\n"
			"(c) 1996-2000  Kulik D.A., Dmytriyeva S.V., Rysin A.V.\n"
			"\tMETA-Technocentre, Kyiv, Ukraine" );
}

void
TVisorImp::CmHelp()
{
  OpenHelp("GEMS-Linux-HOWTO", "P1000");
}


void
TVisorImp::OpenProgress( bool step )
{
    if( ProgressDialog::pDia )
	ProgressDialog::pDia->raise();
    else
	(new ProgressDialog(SystemDialog::pDia, step))->show();
}


QWidget*
TVisorImp::MakePlot(TCModule *md, TOArray<TPlot*>& plts, 
                 const char * title, float* sizeReg, float* sizePrt,
		 TPlotLine *aLines,
		 int aAxisType, const char* aXName, const char *aYName )
{
  TGraph* graph = new TGraph( md, plts, title, sizeReg, sizePrt,
		              aLines, aAxisType, aXName, aYName);
  graph->show();
  return graph;
}

QWidget*
TVisorImp::MakePlot(TCModule *md, TOArray<TPlot*>& plts, 
                 const char * title, 
		 int aAxisType, const char* aXName, const char *aYName )
{
  TGraph* graph = new TGraph( md, plts, title, 
		              aAxisType, aXName, aYName);
  graph->show();
  return graph;
}

QWidget *
TVisorImp::MakeLegend( TGraph *aGraph )
{
  LegendDialogData* legend = new LegendDialogData( aGraph );

  legend->show();
  return legend;
}


/*!
   Opens html <file> positioned on <item>
  
*/

void
TVisorImp::OpenHelp(const char* file, const char* item)
{
  gstring path (pVisor->docDir ());
  path += file;
  if( gstring (path, path.length()-5,5) != ".html" )
    path += ".html";

  if( item && *item )
  {
    path += "#";
    path += item;
  } 

#ifndef QTv1
// HTML Widget
	 if( !pHelpWidget )
	 {
	   pHelpWidget = new HelpWin(this, path.c_str());
	 }
	 else
	 {
	   pHelpWidget->raise();
	   pHelpWidget->setSource(path.c_str());
	 }
#else
#ifdef __unix
// open external browser  
  path = "file:" + path;
  const char* browser = getenv("HTML_BROWSER");
  bool netscape = false;
  
  if( !browser )
      browser = "kfmclient";
  else
    if( strstr(browser,"netscape") )
      netscape = true;

   if( fork() == 0 )
   {
     if( !netscape )
         execlp(browser, browser, 
                     "openURL", path.c_str(), 0);
     else
         execlp(browser, browser,
	             path.c_str(), 0);
     perror(browser);
     exit(errno);
   }
   perror(browser);
#endif // __unix
#endif // QTv1
}


//TCModuleImp*
void
TVisorImp::OpenModule(QWidget* par, int irt, int page, bool viewmode)
{
 try{    
  TCModuleImp* p = aMod[irt]->pImp;
  if( !p )
    p = new TCModuleImp(irt, page, viewmode);
  p->Raise(page);
 }
 catch(TError& e)
 {
    vfMessage(pVisorImp, "Error opening module", e.mess.c_str() );
 }
}


//=============================================
//=============================================

//----------------------------------------------------------------
// GUI Service functions for modules
//----------------------------------------------------------------

bool
vfQuestion(QWidget* par, const gstring& title, const gstring& mess)
{
  return (QMessageBox::information(par, title.c_str(), mess.c_str(), 
  	"&Yes", "&No") == 0);
}


int
vfQuestYesNoCancel(QWidget* par, const gstring& title, const gstring& mess)
{
   switch( QMessageBox::information(
          par, title.c_str(), mess.c_str(), "&Yes", "&No", "&Cancel",
	  0, 2) )
  {
   case 0:
     return VF_YES;
   case 1:
     return VF_NO;
//   case 2:
//     return VF_YES;
  }
  return VF_CANCEL;
}

void
vfMessage(QWidget* par, const gstring& title, const gstring& mess, WarnType type)
{
 switch( type )
 {
   case vfWarn:
     QMessageBox::warning(par, title.c_str(), mess.c_str() );
    break; 
   case vfErr:
      QMessageBox::critical(par, title.c_str(), mess.c_str() );
     break;
   default:
      QMessageBox::information(par, title.c_str(), mess.c_str() );
 }
}

//----------------------------------------------------------------

static int posx=0, posy=0;

// returns VF3_1, VF3_2 or VF3_3
int
vfQuestion3(QWidget* par, const gstring& title, const gstring& mess, const gstring& s1,
		  const gstring& s2,  const gstring& s3, bool i_mov )
{
  QMessageBox qm( title.c_str(), mess.c_str(),
       QMessageBox::Information,
       QMessageBox::Yes | QMessageBox::Default,
       QMessageBox::No,
       QMessageBox::Cancel | QMessageBox::Escape,
       par);
       
  qm.setButtonText(QMessageBox::Yes, s1.c_str());   
  qm.setButtonText(QMessageBox::No, s2.c_str());   
  qm.setButtonText(QMessageBox::Cancel, s3.c_str());   
  if( i_mov )
     qm.move(posx, posy);
  int res = qm.exec(); 

  if( i_mov )
  {
    posx = qm.x();
    posy = qm.y();
   }

  switch( res )
  {
    case QMessageBox::Yes : 		return VF3_1;
    case QMessageBox::No : 		return VF3_2;
    case QMessageBox::Cancel :	return VF3_3;
  }
  return VF3_3;
}

//==================
// vfChoice
//==============

int
vfChoice(QWidget* par, TCStringArray& arr, const char* prompt, int sel)
{
  SelectDialog cw(par, prompt, arr, sel);
  cw.exec();
  return cw.selected();
}

TCIntArray
vfMultiChoice(QWidget* par, TCStringArray& arr, const char* prompt)
{
  TCIntArray sel;
  SelectDialog cw(par, prompt, arr, sel);
  cw.exec();
  return cw.allSelected();
}


TCIntArray
vfMultiChoiceSet(QWidget* par, TCStringArray& arr, const char* prompt, TCIntArray& sel )
{
  SelectDialog cw(par, prompt, arr, sel);
  cw.exec();
  return cw.allSelected();
}


//=============================================
// KeyEdit dialog
//=============================================

#include "dlg/KeyDialog.h"
#include "dlg/KeyProfile.h"

gstring
vfKeyEdit(QWidget* par, const char* caption, int iRt, const char* key)
{

  KeyDialog dbk(par, iRt, key, caption);
  if( !dbk.exec() )
    return "";
    
  return dbk.getKey();
}

gstring
vfKeyProfile(QWidget* par, const char* caption, int iRt, bool& chAqGas)
{

  KeyProfile dbk(par, iRt, caption);
  if( !dbk.exec() )
    return "";

  chAqGas = dbk.getAqGasState();    
  return dbk.getKey();
}

gstring
vfKeyTemplEdit(QWidget* par, const char* caption, int iRt, const char* key,
		bool allowTemplate)
{
  KeyFilter dbk(par, iRt, key, caption, allowTemplate);
  if( !dbk.exec() )
    return "";
    
  return dbk.getFilter();
}

//=============================================
// Open - Save dialogs
//=============================================

bool
vfChooseFileOpen(QWidget* par, gstring& path, const char* title)
{
    gstring filter = "*";


    QString d=QFileDialog::getOpenFileName( ".", filter.c_str(), par, title );
/*QFileDialog d( ".", filter.c_str(), par, title, true );
    d.setCaption("Open");
    
    if( !path.empty() )
	d.setSelection(path.c_str());
        
    if( d.exec() )
    {
	path = d.selectedFile();
	return true;
    }
*/
    if( d.isNull())
    { path = "";
      return false;
    }
    path = d;
    return true;  
}

bool
vfChooseFileSave(QWidget* par, gstring& path, const char* title)
{
    gstring filter = "*";
    QString d=QFileDialog::getSaveFileName( ".", filter.c_str(), par, title );
    if( d.isNull())
    { path = "";
      return false;
    }
    path = d;
    return true;  


/*    QFileDialog d( ".", filter.c_str(), par, title, true );
    d.setCaption("Save As");
    
    if( !path.empty() )
	d.setSelection(path.c_str());
        
    if( d.exec() )
    {
	path = d.selectedFile();
	return true;
    }
    
    path = "";
    return false;
*/
}

void
vfObjToFile(QWidget* par, TObject* obj)
{
    gstring filename;
AGAIN:
    if( vfChooseFileSave(par, filename, "Provide name of TXT-file") )
    {
      int mod = ios::out;

      if( !(::access(filename.c_str(), 0 )) ) //file Exist	
        switch( vfQuestion3( par, filename.c_str(), "This file exists! What to do?",
	  "&Append", "&Overwrite", "&Cancel") )
       { 
        case VF3_2: mod = ios::out;
	            break;
        case VF3_1: mod = ios::app;
	            break;
        case VF3_3: goto AGAIN;
      }			 
      fstream f( filename.c_str(), mod );    
	/// errors
      obj->toTXT( f );
    }
}

TVisorImp* pVisorImp;
